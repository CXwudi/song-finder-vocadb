# version catalog can be used in any gradle build, simply add
#
# dependencyResolutionManagement {
#   versionCatalogs {
#     create("libs") {
#       from(files("path/to/libs.versions.toml"))
#     }
#   }
# }
#
# to settings.gradle.kts to include the version catalog in your build.
# any settings.gradle.kts works!
# see https://docs.gradle.org/current/userguide/platforms.html#sec:sharing-catalogs for more details
[versions]
# java version is defined in my.jvm-base.gradle.kts
# lib versions
kotlin = "2.0.21" # !important, the version is upbounded by each compose multiplatform version
compose = "1.8.0+check"
springBoot = "3.3.5"
composeIcons = "1.1.1"
ktor = "3.0.0"
kamel = "1.0.1"

# plugin dep versions
# empty for now
[libraries]
# unless there is a keyword conflict or the name is wired
# bom, naming convention: bom-<name>
bom-springBoot = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "springBoot" }
bom-kotest = "io.kotest:kotest-bom:5.9.1"
bom-coroutines = "org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.9.0"
# plugin dependencies (for both projects and settings), naming convention: s/p + plugin-<name>
pluginDep-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
pluginDep-kotlinCompose = { module = "org.jetbrains.kotlin:compose-compiler-gradle-plugin", version.ref = "kotlin" }
pluginDep-springBoot = { module = "org.springframework.boot:spring-boot-gradle-plugin", version.ref = "springBoot" }
pluginDep-composeJb = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "compose" }
# "io.spring.gradle:dependency-management-plugin" is unneeded because we prefer Gradle's native dependency management
settingDep-gradleEnterprise = "com.gradle.develocity:com.gradle.develocity.gradle.plugin:3.18.1"
settingDep-foojayResolver = "org.gradle.toolchains:foojay-resolver:0.8.0"
# dependencies, naming convention: dep-<name>
dep-kotlinJvmInlineLogging = "com.github.CXwudi:kotlin-jvm-inline-logging:1.0.1"
dep-kotestExtensionsSpring = "io.kotest.extensions:kotest-extensions-spring:1.3.0"
dep-mockk = "io.mockk:mockk:1.13.13"
dep-springMockk = "com.ninja-squad:springmockk:4.0.2"
dep-composeFilePicker = "com.darkrockstudios:mpfilepicker:3.1.0"
dep-composeSimpleIcons = { module = "br.com.devsrsouza.compose.icons:simple-icons", version.ref = "composeIcons" }
dep-composeFontAwesome = { module = "br.com.devsrsouza.compose.icons:font-awesome", version.ref = "composeIcons" }
dep-composeKamelImage = { module = "media.kamel:kamel-image", version.ref = "kamel" }
dep-composeKamelImage-resources = { module = "media.kamel:kamel-fetcher-resources-jvm", version.ref = "kamel" }
dep-ktorJavaClient = { module = "io.ktor:ktor-client-java", version.ref = "ktor" } # required by kamel-image
dep-ktorContentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" } # required for using jackson
dep-ktorJackson = { module = "io.ktor:ktor-serialization-jackson", version.ref = "ktor" }

[plugins]
# plugins that are used in main build but not in precompiled script plugins
# when multiple main builds have similar plugin settings on a plugin here,
# then it have to be moved to a separated precompiled script plugin

# this is only used by the workaround in root build.gradle.kts
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
compose = { id = "org.jetbrains.compose", version.ref = "compose" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
# used by the app
kotlinSpring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
